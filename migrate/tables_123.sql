table VERSIE:
  CREATE TABLE IF NOT EXISTS VERSIE (ID INTEGER PRIMARY KEY,db_versie
  TEXT,versie TEXT,datum TEXT);
table FILEROOT:
  CREATE TABLE IF NOT EXISTS FILEROOT (ID INTEGER PRIMARY KEY,code
  TEXT UNIQUE,root TEXT);
table STUDENTEN:
  CREATE TABLE IF NOT EXISTS STUDENTEN (id INTEGER PRIMARY KEY,stud_nr
  TEXT,full_name TEXT,first_name TEXT,email TEXT NOT NULL,status
  INTEGER);
table BEDRIJVEN:
  CREATE TABLE IF NOT EXISTS BEDRIJVEN (id INTEGER PRIMARY KEY,name
  TEXT);
table AANVRAGEN:
  CREATE TABLE IF NOT EXISTS AANVRAGEN (id INTEGER PRIMARY KEY,datum
  TEXT,stud_id INTEGER,bedrijf_id INTEGER,titel TEXT,kans
  INTEGER,status INTEGER,beoordeling INTEGER,datum_str TEXT,versie
  INTEGER,FOREIGN KEY(stud_id) REFERENCES STUDENTEN(id) ON UPDATE
  CASCADE ON DELETE CASCADE,FOREIGN KEY(bedrijf_id) REFERENCES
  BEDRIJVEN(id) ON UPDATE CASCADE ON DELETE CASCADE);
table AANVRAGEN_FILES:
  CREATE TABLE IF NOT EXISTS AANVRAGEN_FILES (aanvraag_id
  INTEGER,file_id INTEGER,PRIMARY KEY(aanvraag_id,file_id),FOREIGN
  KEY(aanvraag_id) REFERENCES AANVRAGEN(id) ON UPDATE CASCADE ON
  DELETE CASCADE,FOREIGN KEY(file_id) REFERENCES FILES(id) ON UPDATE
  CASCADE ON DELETE CASCADE);
table FILES:
  CREATE TABLE IF NOT EXISTS FILES (id INTEGER PRIMARY KEY,filename
  TEXT,timestamp TEXT,digest TEXT,filetype INTEGER,mijlpaal_type
  INTEGER); CREATE INDEX IF NOT EXISTS name_index ON FILES(filename);
table UNDOLOGS:
  CREATE TABLE IF NOT EXISTS UNDOLOGS (id INTEGER PRIMARY
  KEY,description TEXT,action INTEGER,user TEXT,date TEXT,can_undo
  INTEGER);
table UNDOLOGS_AANVRAGEN:
  CREATE TABLE IF NOT EXISTS UNDOLOGS_AANVRAGEN (log_id
  INTEGER,aanvraag_id INTEGER,PRIMARY KEY(log_id,aanvraag_id),FOREIGN
  KEY(log_id) REFERENCES UNDOLOGS(id) ON UPDATE CASCADE ON DELETE
  CASCADE,FOREIGN KEY(aanvraag_id) REFERENCES AANVRAGEN(id) ON UPDATE
  CASCADE ON DELETE CASCADE);
table UNDOLOGS_FILES:
  CREATE TABLE IF NOT EXISTS UNDOLOGS_FILES (log_id INTEGER,file_id
  INTEGER,PRIMARY KEY(log_id,file_id),FOREIGN KEY(log_id) REFERENCES
  UNDOLOGS(id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN
  KEY(file_id) REFERENCES FILES(id) ON UPDATE CASCADE ON DELETE
  CASCADE);
table VERSLAGEN:
  CREATE TABLE IF NOT EXISTS VERSLAGEN (id INTEGER PRIMARY KEY,datum
  TEXT,stud_id INTEGER,bedrijf_id INTEGER,titel TEXT,kans
  INTEGER,status INTEGER,beoordeling INTEGER,verslag_type
  INTEGER,cijfer TEXT,FOREIGN KEY(stud_id) REFERENCES STUDENTEN(id) ON
  UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY(bedrijf_id) REFERENCES
  BEDRIJVEN(id) ON UPDATE CASCADE ON DELETE CASCADE);
table VERSLAGEN_FILES:
  CREATE TABLE IF NOT EXISTS VERSLAGEN_FILES (verslag_id
  INTEGER,file_id INTEGER,PRIMARY KEY(verslag_id,file_id),FOREIGN
  KEY(verslag_id) REFERENCES VERSLAGEN(id) ON UPDATE CASCADE ON DELETE
  CASCADE,FOREIGN KEY(file_id) REFERENCES FILES(id) ON UPDATE CASCADE
  ON DELETE CASCADE);
table BASEDIRS:
  CREATE TABLE IF NOT EXISTS BASEDIRS (id INTEGER PRIMARY KEY,year
  INTEGER,period TEXT,forms_version TEXT,directory TEXT);
table STUDENT_DIRECTORIES:
  CREATE TABLE IF NOT EXISTS STUDENT_DIRECTORIES (id INTEGER PRIMARY
  KEY,stud_id INTEGER,directory TEXT,basedir_id INTEGER,status
  INTEGER,FOREIGN KEY(stud_id) REFERENCES STUDENTEN(id) ON UPDATE
  CASCADE ON DELETE CASCADE,FOREIGN KEY(basedir_id) REFERENCES
  BASEDIRS(id) ON UPDATE CASCADE ON DELETE CASCADE);
table STUDENT_DIRECTORY_DIRECTORIES:
  CREATE TABLE IF NOT EXISTS STUDENT_DIRECTORY_DIRECTORIES
  (stud_dir_id INTEGER,mp_dir_id INTEGER,PRIMARY
  KEY(stud_dir_id,mp_dir_id),FOREIGN KEY(stud_dir_id) REFERENCES
  STUDENT_DIRECTORIES(id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN
  KEY(mp_dir_id) REFERENCES MIJLPAAL_DIRECTORY(id) ON UPDATE CASCADE
  ON DELETE CASCADE);
table MIJLPAAL_DIRECTORIES:
  CREATE TABLE IF NOT EXISTS MIJLPAAL_DIRECTORIES (id INTEGER PRIMARY
  KEY,mijlpaal_type INTEGER,kans INTEGER,directory TEXT,datum TEXT);
table MIJLPAAL_DIRECTORY_FILES:
  CREATE TABLE IF NOT EXISTS MIJLPAAL_DIRECTORY_FILES (mp_dir_id
  INTEGER,file_id INTEGER,PRIMARY KEY(mp_dir_id,file_id),FOREIGN
  KEY(mp_dir_id) REFERENCES MIJLPAAL_DIRECTORIES(id) ON UPDATE CASCADE
  ON DELETE CASCADE,FOREIGN KEY(file_id) REFERENCES FILES(id) ON
  UPDATE CASCADE ON DELETE CASCADE);
